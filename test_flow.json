{"id":"ed856b9a-8ab2-412d-812d-9cb57f712a2d","data":{"nodes":[{"id":"FileLoader-XnQ2p","type":"genericNode","position":{"x":-1246.8273031195163,"y":-244.05750613618363},"data":{"type":"FileLoader","node":{"template":{"file_path":{"type":"file","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":["json","txt","csv","jsonl","html","htm","conllu","enex","msg","pdf","srt","eml","md","pptx","docx"],"file_path":"/home/vasyl/.cache/langflow/ed856b9a-8ab2-412d-812d-9cb57f712a2d/43e4fe56f6412d6b4316d425fa82204f8f8fb8958c993bb26d18a6357bd6a5e2.csv","password":false,"name":"file_path","display_name":"File Path","advanced":false,"dynamic":false,"info":"","title_case":true,"value":""},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langchain_core.documents import Document\nfrom langflow import CustomComponent\nfrom langflow.utils.constants import LOADERS_INFO\n\n\nclass FileLoaderComponent(CustomComponent):\n    display_name: str = \"File Loader\"\n    description: str = \"Generic File Loader\"\n    beta = True\n\n    def build_config(self):\n        loader_options = [\"Automatic\"] + [loader_info[\"name\"] for loader_info in LOADERS_INFO]\n\n        file_types = []\n        suffixes = []\n\n        for loader_info in LOADERS_INFO:\n            if \"allowedTypes\" in loader_info:\n                file_types.extend(loader_info[\"allowedTypes\"])\n                suffixes.extend([f\".{ext}\" for ext in loader_info[\"allowedTypes\"]])\n\n        return {\n            \"file_path\": {\n                \"display_name\": \"File Path\",\n                \"required\": True,\n                \"field_type\": \"file\",\n                \"file_types\": [\n                    \"json\",\n                    \"txt\",\n                    \"csv\",\n                    \"jsonl\",\n                    \"html\",\n                    \"htm\",\n                    \"conllu\",\n                    \"enex\",\n                    \"msg\",\n                    \"pdf\",\n                    \"srt\",\n                    \"eml\",\n                    \"md\",\n                    \"pptx\",\n                    \"docx\",\n                ],\n                \"suffixes\": [\n                    \".json\",\n                    \".txt\",\n                    \".csv\",\n                    \".jsonl\",\n                    \".html\",\n                    \".htm\",\n                    \".conllu\",\n                    \".enex\",\n                    \".msg\",\n                    \".pdf\",\n                    \".srt\",\n                    \".eml\",\n                    \".md\",\n                    \".pptx\",\n                    \".docx\",\n                ],\n                # \"file_types\" : file_types,\n                # \"suffixes\": suffixes,\n            },\n            \"loader\": {\n                \"display_name\": \"Loader\",\n                \"is_list\": True,\n                \"required\": True,\n                \"options\": loader_options,\n                \"value\": \"Automatic\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(self, file_path: str, loader: str) -> Document:\n        file_type = file_path.split(\".\")[-1]\n\n        # Mapeie o nome do loader selecionado para suas informações\n        selected_loader_info = None\n        for loader_info in LOADERS_INFO:\n            if loader_info[\"name\"] == loader:\n                selected_loader_info = loader_info\n                break\n\n        if selected_loader_info is None and loader != \"Automatic\":\n            raise ValueError(f\"Loader {loader} not found in the loader info list\")\n\n        if loader == \"Automatic\":\n            # Determine o loader automaticamente com base na extensão do arquivo\n            default_loader_info = None\n            for info in LOADERS_INFO:\n                if \"defaultFor\" in info and file_type in info[\"defaultFor\"]:\n                    default_loader_info = info\n                    break\n\n            if default_loader_info is None:\n                raise ValueError(f\"No default loader found for file type: {file_type}\")\n\n            selected_loader_info = default_loader_info\n        if isinstance(selected_loader_info, dict):\n            loader_import: str = selected_loader_info[\"import\"]\n        else:\n            raise ValueError(f\"Loader info for {loader} is not a dict\\nLoader info:\\n{selected_loader_info}\")\n        module_name, class_name = loader_import.rsplit(\".\", 1)\n\n        try:\n            # Importe o loader dinamicamente\n            loader_module = __import__(module_name, fromlist=[class_name])\n            loader_instance = getattr(loader_module, class_name)\n        except ImportError as e:\n            raise ValueError(f\"Loader {loader} could not be imported\\nLoader info:\\n{selected_loader_info}\") from e\n\n        result = loader_instance(file_path=file_path)\n        return result.load()\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"loader":{"type":"str","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"value":"CSV (.csv)","fileTypes":[],"file_path":"","password":false,"options":["Automatic","Airbyte JSON (.jsonl)","JSON (.json)","BeautifulSoup4 HTML (.html, .htm)","CSV (.csv)","CoNLL-U (.conllu)","EverNote (.enex)","Facebook Chat (.json)","Outlook Message (.msg)","PyPDF (.pdf)","Subtitle (.str)","Text (.txt)","Unstructured Email (.eml)","Unstructured HTML (.html, .htm)","Unstructured Markdown (.md)","Unstructured PowerPoint (.pptx)","Unstructured Word (.docx)"],"name":"loader","display_name":"Loader","advanced":false,"dynamic":false,"info":"","title_case":true},"_type":"CustomComponent"},"description":"Generic File Loader","base_classes":["Document"],"display_name":"File Loader","documentation":"","custom_fields":{"file_path":null,"loader":null},"output_types":["Document"],"field_formatters":{},"beta":true},"id":"FileLoader-XnQ2p","description":"Generic File Loader","display_name":"File Loader"},"selected":false,"width":384,"height":455,"positionAbsolute":{"x":-1246.8273031195163,"y":-244.05750613618363},"dragging":false},{"id":"LanguageRecursiveTextSplitter-FFba3","type":"genericNode","position":{"x":-774.5870476065063,"y":-213.51461931150195},"data":{"type":"LanguageRecursiveTextSplitter","node":{"template":{"documents":{"type":"Document","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"documents","display_name":"Documents","advanced":false,"dynamic":false,"info":"The documents to split.","title_case":true},"chunk_overlap":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":200,"fileTypes":[],"file_path":"","password":false,"name":"chunk_overlap","display_name":"Chunk Overlap","advanced":false,"dynamic":false,"info":"The amount of overlap between chunks.","title_case":true},"chunk_size":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":1000,"fileTypes":[],"file_path":"","password":false,"name":"chunk_size","display_name":"Chunk Size","advanced":false,"dynamic":false,"info":"The maximum length of each chunk.","title_case":true},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional\n\nfrom langchain.text_splitter import Language\nfrom langchain_core.documents import Document\n\nfrom langflow import CustomComponent\n\n\nclass LanguageRecursiveTextSplitterComponent(CustomComponent):\n    display_name: str = \"Language Recursive Text Splitter\"\n    description: str = \"Split text into chunks of a specified length based on language.\"\n    documentation: str = \"https://docs.langflow.org/components/text-splitters#languagerecursivetextsplitter\"\n\n    def build_config(self):\n        options = [x.value for x in Language]\n        return {\n            \"documents\": {\n                \"display_name\": \"Documents\",\n                \"info\": \"The documents to split.\",\n            },\n            \"separator_type\": {\n                \"display_name\": \"Separator Type\",\n                \"info\": \"The type of separator to use.\",\n                \"field_type\": \"str\",\n                \"options\": options,\n                \"value\": \"Python\",\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": \"The characters to split on.\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        documents: list[Document],\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n        separator_type: str = \"Python\",\n    ) -> list[Document]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n        from langchain.text_splitter import RecursiveCharacterTextSplitter\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n\n        splitter = RecursiveCharacterTextSplitter.from_language(\n            language=Language(separator_type),\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n\n        docs = splitter.split_documents(documents)\n        return docs\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"separator_type":{"type":"str","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"value":"markdown","fileTypes":[],"file_path":"","password":false,"options":["cpp","go","java","kotlin","js","ts","php","proto","python","rst","ruby","rust","scala","swift","markdown","latex","html","sol","csharp","cobol","c","lua","perl"],"name":"separator_type","display_name":"Separator Type","advanced":false,"dynamic":false,"info":"The type of separator to use.","title_case":true},"_type":"CustomComponent"},"description":"Split text into chunks of a specified length based on language.","base_classes":["Document"],"display_name":"Language Recursive Text Splitter","documentation":"https://docs.langflow.org/components/text-splitters#languagerecursivetextsplitter","custom_fields":{"documents":null,"chunk_size":null,"chunk_overlap":null,"separator_type":null},"output_types":["Document"],"field_formatters":{},"beta":true},"id":"LanguageRecursiveTextSplitter-FFba3"},"selected":false,"width":384,"height":609,"positionAbsolute":{"x":-774.5870476065063,"y":-213.51461931150195},"dragging":false},{"id":"ChatOpenAI-GGXOo","type":"genericNode","position":{"x":552.3987070936976,"y":-276.6564589137995},"data":{"type":"ChatOpenAI","node":{"template":{"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom langflow import CustomComponent\nfrom langflow.field_typing import BaseLanguageModel, NestedDict\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"max_tokens":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":256,"fileTypes":[],"file_path":"","password":false,"name":"max_tokens","display_name":"Max Tokens","advanced":false,"dynamic":false,"info":"","title_case":true},"model_kwargs":{"type":"NestedDict","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":{},"fileTypes":[],"file_path":"","password":false,"name":"model_kwargs","display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":true},"model_name":{"type":"str","required":false,"placeholder":"","list":true,"show":true,"multiline":false,"value":"gpt-4-1106-preview","fileTypes":[],"file_path":"","password":false,"options":["gpt-4-turbo-preview","gpt-4-0125-preview","gpt-4-1106-preview","gpt-4-vision-preview","gpt-3.5-turbo-0125","gpt-3.5-turbo-1106"],"name":"model_name","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","title_case":true},"openai_api_base":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"openai_api_base","display_name":"OpenAI API Base","advanced":false,"dynamic":false,"info":"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.","title_case":true},"openai_api_key":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":true,"name":"openai_api_key","display_name":"OpenAI API Key","advanced":false,"dynamic":false,"info":"","title_case":true},"temperature":{"type":"float","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"0.2","fileTypes":[],"file_path":"","password":false,"name":"temperature","display_name":"Temperature","advanced":false,"dynamic":false,"info":"","rangeSpec":{"min":-1,"max":1,"step":0.1},"title_case":true},"_type":"CustomComponent"},"description":"`OpenAI` Chat large language models API.","base_classes":["BaseLanguageModel","BaseLLM","BaseLanguageModel"],"display_name":"ChatOpenAI","documentation":"","custom_fields":{"max_tokens":null,"model_kwargs":null,"model_name":null,"openai_api_base":null,"openai_api_key":null,"temperature":null},"output_types":["BaseLanguageModel","BaseLLM"],"field_formatters":{},"beta":true},"id":"ChatOpenAI-GGXOo"},"selected":false,"width":384,"height":728,"positionAbsolute":{"x":552.3987070936976,"y":-276.6564589137995},"dragging":false},{"id":"OpenAPIToolkit-nRDBz","type":"genericNode","position":{"x":1564.6022560401675,"y":539.5703263311968},"data":{"type":"OpenAPIToolkit","node":{"template":{"json_agent":{"type":"AgentExecutor","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"json_agent","display_name":"JSON Agent","advanced":false,"dynamic":false,"info":"","title_case":true},"requests_wrapper":{"type":"TextRequestsWrapper","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"requests_wrapper","display_name":"Text Requests Wrapper","advanced":false,"dynamic":false,"info":"","title_case":true},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langchain_community.agent_toolkits.openapi.toolkit import BaseToolkit, OpenAPIToolkit\nfrom langchain_community.utilities.requests import TextRequestsWrapper\nfrom langflow import CustomComponent\nfrom langflow.field_typing import AgentExecutor\n\n\nclass OpenAPIToolkitComponent(CustomComponent):\n    display_name = \"OpenAPIToolkit\"\n    description = \"Toolkit for interacting with an OpenAPI API.\"\n\n    def build_config(self):\n        return {\n            \"json_agent\": {\"display_name\": \"JSON Agent\"},\n            \"requests_wrapper\": {\"display_name\": \"Text Requests Wrapper\"},\n        }\n\n    def build(\n        self,\n        json_agent: AgentExecutor,\n        requests_wrapper: TextRequestsWrapper,\n    ) -> BaseToolkit:\n        return OpenAPIToolkit(json_agent=json_agent, requests_wrapper=requests_wrapper)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"_type":"CustomComponent"},"description":"Toolkit for interacting with an OpenAPI API.","base_classes":["BaseToolkit"],"display_name":"OpenAPIToolkit","documentation":"","custom_fields":{"json_agent":null,"requests_wrapper":null},"output_types":["BaseToolkit"],"field_formatters":{},"beta":true},"id":"OpenAPIToolkit-nRDBz"},"selected":false,"width":384,"height":376,"positionAbsolute":{"x":1564.6022560401675,"y":539.5703263311968},"dragging":false},{"id":"JsonAgent-C1MWT","type":"genericNode","position":{"x":1029.3989696774113,"y":293.4380463928842},"data":{"type":"JsonAgent","node":{"template":{"llm":{"type":"BaseLanguageModel","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"llm","display_name":"LLM","advanced":false,"dynamic":false,"info":"","title_case":true},"toolkit":{"type":"JsonToolkit","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"toolkit","display_name":"Toolkit","advanced":false,"dynamic":false,"info":"","title_case":true},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow import CustomComponent\nfrom langchain.agents import AgentExecutor, create_json_agent\nfrom langflow.field_typing import (\n    BaseLanguageModel,\n)\nfrom langchain_community.agent_toolkits.json.toolkit import JsonToolkit\n\n\nclass JsonAgentComponent(CustomComponent):\n    display_name = \"JsonAgent\"\n    description = \"Construct a json agent from an LLM and tools.\"\n\n    def build_config(self):\n        return {\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"toolkit\": {\"display_name\": \"Toolkit\"},\n        }\n\n    def build(\n        self,\n        llm: BaseLanguageModel,\n        toolkit: JsonToolkit,\n    ) -> AgentExecutor:\n        return create_json_agent(llm=llm, toolkit=toolkit)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"_type":"CustomComponent"},"description":"Construct a json agent from an LLM and tools.","base_classes":["Chain","AgentExecutor"],"display_name":"JsonAgent","documentation":"","custom_fields":{"llm":null,"toolkit":null},"output_types":["AgentExecutor"],"field_formatters":{},"beta":true},"id":"JsonAgent-C1MWT"},"selected":false,"width":384,"height":376,"positionAbsolute":{"x":1029.3989696774113,"y":293.4380463928842},"dragging":false},{"id":"JsonToolkit-tsXDB","type":"genericNode","position":{"x":539.4059993180973,"y":471.8657260435443},"data":{"type":"JsonToolkit","node":{"template":{"spec":{"type":"JsonSpec","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"spec","display_name":"Spec","advanced":false,"dynamic":false,"info":"","title_case":true},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow import CustomComponent\nfrom langchain_community.tools.json.tool import JsonSpec\nfrom langchain_community.agent_toolkits.json.toolkit import JsonToolkit\n\n\nclass JsonToolkitComponent(CustomComponent):\n    display_name = \"JsonToolkit\"\n    description = \"Toolkit for interacting with a JSON spec.\"\n\n    def build_config(self):\n        return {\n            \"spec\": {\"display_name\": \"Spec\", \"type\": JsonSpec},\n        }\n\n    def build(self, spec: JsonSpec) -> JsonToolkit:\n        return JsonToolkit(spec=spec)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"_type":"CustomComponent"},"description":"Toolkit for interacting with a JSON spec.","base_classes":["JsonToolkit","BaseToolkit"],"display_name":"JsonToolkit","documentation":"","custom_fields":{"spec":null},"output_types":["JsonToolkit"],"field_formatters":{},"beta":true},"id":"JsonToolkit-tsXDB"},"selected":false,"width":384,"height":328,"positionAbsolute":{"x":539.4059993180973,"y":471.8657260435443},"dragging":false},{"id":"JsonSpec-ARfxj","type":"genericNode","position":{"x":65.46543106647493,"y":430.6570155319056},"data":{"type":"JsonSpec","node":{"template":{"path":{"type":"file","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"","fileTypes":[".json",".yaml",".yml"],"file_path":"","password":false,"name":"path","advanced":false,"dynamic":false,"info":"","title_case":true},"max_value_length":{"type":"int","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"","fileTypes":[],"file_path":"","password":false,"name":"max_value_length","advanced":false,"dynamic":false,"info":"","title_case":true},"_type":"JsonSpec"},"description":"","base_classes":["Tool","BaseTool","JsonSpec"],"display_name":"JsonSpec","documentation":"","custom_fields":{},"output_types":[],"field_formatters":{},"beta":false},"id":"JsonSpec-ARfxj"},"selected":false,"width":384,"height":326,"positionAbsolute":{"x":65.46543106647493,"y":430.6570155319056},"dragging":false},{"id":"TextRequestsWrapper-tGUS6","type":"genericNode","position":{"x":545.7641770914115,"y":850.2912405648966},"data":{"type":"TextRequestsWrapper","node":{"template":{"aiosession":{"type":"ClientSession","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"fileTypes":[],"password":false,"name":"aiosession","advanced":false,"dynamic":false,"info":"","title_case":true},"auth":{"type":"Any","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"fileTypes":[],"password":false,"name":"auth","advanced":false,"dynamic":false,"info":"","title_case":true},"headers":{"type":"dict","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"{\"Authorization\": \"Bearer <token>\"}","fileTypes":[],"password":false,"name":"headers","advanced":false,"dynamic":false,"info":"","title_case":true},"response_content_type":{"type":"str","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"value":"text","fileTypes":[],"password":false,"name":"response_content_type","advanced":false,"dynamic":false,"info":"","title_case":true},"_type":"TextRequestsWrapper"},"description":"Lightweight wrapper around requests library, with async support.","base_classes":["GenericRequestsWrapper","TextRequestsWrapper"],"display_name":"TextRequestsWrapper","documentation":"","custom_fields":{},"output_types":[],"field_formatters":{},"beta":false},"id":"TextRequestsWrapper-tGUS6"},"selected":false,"width":384,"height":300,"positionAbsolute":{"x":545.7641770914115,"y":850.2912405648966},"dragging":false},{"id":"CombineDocsChain-UzJAV","type":"genericNode","position":{"x":-99.4428337757954,"y":-889.4871096166537},"data":{"type":"CombineDocsChain","node":{"template":{"llm":{"type":"BaseLanguageModel","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"","fileTypes":[],"file_path":"","password":false,"name":"llm","display_name":"LLM","advanced":false,"dynamic":false,"info":"","title_case":true},"chain_type":{"type":"str","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"value":"stuff","fileTypes":[],"file_path":"","password":false,"options":["stuff","map_reduce","map_rerank","refine"],"name":"chain_type","advanced":false,"dynamic":false,"info":"","title_case":true},"_type":"load_qa_chain"},"description":"Load question answering chain.","base_classes":["BaseCombineDocumentsChain","Callable"],"display_name":"CombineDocsChain","documentation":"","custom_fields":{},"output_types":[],"field_formatters":{},"beta":false},"id":"CombineDocsChain-UzJAV"},"selected":true,"width":384,"height":332,"positionAbsolute":{"x":-99.4428337757954,"y":-889.4871096166537},"dragging":true},{"id":"OpenAI-Yb1wj","type":"genericNode","position":{"x":-654.9687781516417,"y":-1088.3988071956887},"data":{"type":"OpenAI","node":{"template":{"cache":{"type":"BaseCache","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"fileTypes":[],"password":false,"name":"cache","advanced":false,"dynamic":false,"info":"","title_case":true},"callbacks":{"type":"langchain_core.callbacks.base.BaseCallbackHandler","required":false,"placeholder":"","list":true,"show":false,"multiline":false,"fileTypes":[],"password":false,"name":"callbacks","advanced":false,"dynamic":false,"info":"","title_case":true},"custom_get_token_ids":{"type":"Callable[[str], int]","required":false,"placeholder":"","list":true,"show":false,"multiline":false,"fileTypes":[],"password":false,"name":"custom_get_token_ids","advanced":false,"dynamic":false,"info":"","title_case":true},"allowed_special":{"type":"str","required":false,"placeholder":"","list":true,"show":false,"multiline":false,"value":[],"fileTypes":[],"password":false,"name":"allowed_special","advanced":false,"dynamic":false,"info":"","title_case":true},"async_client":{"type":"Any","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"fileTypes":[],"password":false,"name":"async_client","advanced":false,"dynamic":false,"info":"","title_case":true},"batch_size":{"type":"int","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"value":20,"fileTypes":[],"password":false,"name":"batch_size","advanced":false,"dynamic":false,"info":"","title_case":true},"best_of":{"type":"int","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"value":1,"fileTypes":[],"password":false,"name":"best_of","advanced":false,"dynamic":false,"info":"","title_case":true},"client":{"type":"Any","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"fileTypes":[],"password":false,"name":"client","advanced":false,"dynamic":false,"info":"","title_case":true},"default_headers":{"type":"dict","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"fileTypes":[],"password":false,"name":"default_headers","advanced":false,"dynamic":false,"info":"","title_case":true},"default_query":{"type":"dict","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"fileTypes":[],"password":false,"name":"default_query","advanced":false,"dynamic":false,"info":"","title_case":true},"disallowed_special":{"type":"str","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"value":"all","fileTypes":[],"password":false,"name":"disallowed_special","advanced":false,"dynamic":false,"info":"","title_case":true},"frequency_penalty":{"type":"float","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"value":0,"fileTypes":[],"password":false,"name":"frequency_penalty","advanced":false,"dynamic":false,"info":"","rangeSpec":{"min":-1,"max":1,"step":0.1},"title_case":true},"http_client":{"type":"Any","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"fileTypes":[],"password":false,"name":"http_client","advanced":false,"dynamic":false,"info":"","title_case":true},"logit_bias":{"type":"dict","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"fileTypes":[],"password":false,"name":"logit_bias","advanced":false,"dynamic":false,"info":"","title_case":true},"max_retries":{"type":"int","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"value":2,"fileTypes":[],"password":false,"name":"max_retries","advanced":false,"dynamic":false,"info":"","title_case":true},"max_tokens":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":256,"fileTypes":[],"password":true,"name":"max_tokens","advanced":false,"dynamic":false,"info":"","title_case":true},"metadata":{"type":"dict","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"fileTypes":[],"password":false,"name":"metadata","advanced":false,"dynamic":false,"info":"","title_case":true},"model_kwargs":{"type":"dict","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"password":false,"name":"model_kwargs","advanced":true,"dynamic":false,"info":"","title_case":true},"model_name":{"type":"str","required":false,"placeholder":"","list":true,"show":true,"multiline":false,"value":"text-davinci-003","fileTypes":[],"password":false,"options":["text-davinci-003","text-davinci-002","text-curie-001","text-babbage-001","text-ada-001"],"name":"model_name","advanced":false,"dynamic":false,"info":"","title_case":true},"n":{"type":"int","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"value":1,"fileTypes":[],"password":false,"name":"n","advanced":false,"dynamic":false,"info":"","title_case":true},"name":{"type":"str","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"fileTypes":[],"password":false,"name":"name","advanced":false,"dynamic":false,"info":"","title_case":true},"openai_api_base":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"password":false,"name":"openai_api_base","display_name":"OpenAI API Base","advanced":false,"dynamic":false,"info":"\nThe base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.\n","title_case":true},"openai_api_key":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"","fileTypes":[],"password":true,"name":"openai_api_key","display_name":"OpenAI API Key","advanced":false,"dynamic":false,"info":"","title_case":true},"openai_organization":{"type":"str","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"fileTypes":[],"password":false,"name":"openai_organization","display_name":"OpenAI Organization","advanced":false,"dynamic":false,"info":"","title_case":true},"openai_proxy":{"type":"str","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"fileTypes":[],"password":false,"name":"openai_proxy","display_name":"OpenAI Proxy","advanced":false,"dynamic":false,"info":"","title_case":true},"presence_penalty":{"type":"float","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"value":0,"fileTypes":[],"password":false,"name":"presence_penalty","advanced":false,"dynamic":false,"info":"","rangeSpec":{"min":-1,"max":1,"step":0.1},"title_case":true},"request_timeout":{"type":"float","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"fileTypes":[],"password":false,"name":"request_timeout","advanced":false,"dynamic":false,"info":"","rangeSpec":{"min":-1,"max":1,"step":0.1},"title_case":true},"streaming":{"type":"bool","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"value":false,"fileTypes":[],"password":false,"name":"streaming","advanced":false,"dynamic":false,"info":"","title_case":true},"tags":{"type":"str","required":false,"placeholder":"","list":true,"show":false,"multiline":false,"fileTypes":[],"password":false,"name":"tags","advanced":false,"dynamic":false,"info":"","title_case":true},"temperature":{"type":"float","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":0.7,"fileTypes":[],"password":false,"name":"temperature","advanced":false,"dynamic":false,"info":"","rangeSpec":{"min":-1,"max":1,"step":0.1},"title_case":true},"tiktoken_model_name":{"type":"str","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"fileTypes":[],"password":false,"name":"tiktoken_model_name","advanced":false,"dynamic":false,"info":"","title_case":true},"top_p":{"type":"float","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"value":1,"fileTypes":[],"password":false,"name":"top_p","advanced":false,"dynamic":false,"info":"","rangeSpec":{"min":-1,"max":1,"step":0.1},"title_case":true},"verbose":{"type":"bool","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"fileTypes":[],"password":false,"name":"verbose","advanced":false,"dynamic":false,"info":"","title_case":true},"_type":"OpenAI"},"description":"[*Deprecated*] OpenAI large language models.","base_classes":["BaseLLM","OpenAI","BaseOpenAI","BaseLanguageModel"],"display_name":"OpenAI","documentation":"https://python.langchain.com/docs/modules/model_io/models/llms/integrations/openai","custom_fields":{},"output_types":[],"field_formatters":{},"beta":false},"id":"OpenAI-Yb1wj"},"selected":false,"width":384,"height":643,"positionAbsolute":{"x":-654.9687781516417,"y":-1088.3988071956887},"dragging":false}],"edges":[{"source":"FileLoader-XnQ2p","sourceHandle":"{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œFileLoaderœ,œidœ:œFileLoader-XnQ2pœ}","target":"LanguageRecursiveTextSplitter-FFba3","targetHandle":"{œfieldNameœ:œdocumentsœ,œidœ:œLanguageRecursiveTextSplitter-FFba3œ,œinputTypesœ:null,œtypeœ:œDocumentœ}","data":{"targetHandle":{"fieldName":"documents","id":"LanguageRecursiveTextSplitter-FFba3","inputTypes":null,"type":"Document"},"sourceHandle":{"baseClasses":["Document"],"dataType":"FileLoader","id":"FileLoader-XnQ2p"}},"style":{"stroke":"#555"},"className":"stroke-foreground  stroke-connection","animated":false,"id":"reactflow__edge-FileLoader-XnQ2p{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œFileLoaderœ,œidœ:œFileLoader-XnQ2pœ}-LanguageRecursiveTextSplitter-FFba3{œfieldNameœ:œdocumentsœ,œidœ:œLanguageRecursiveTextSplitter-FFba3œ,œinputTypesœ:null,œtypeœ:œDocumentœ}"},{"source":"ChatOpenAI-GGXOo","sourceHandle":"{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-GGXOoœ}","target":"JsonAgent-C1MWT","targetHandle":"{œfieldNameœ:œllmœ,œidœ:œJsonAgent-C1MWTœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}","data":{"targetHandle":{"fieldName":"llm","id":"JsonAgent-C1MWT","inputTypes":null,"type":"BaseLanguageModel"},"sourceHandle":{"baseClasses":["BaseLanguageModel","BaseLLM","BaseLanguageModel"],"dataType":"ChatOpenAI","id":"ChatOpenAI-GGXOo"}},"style":{"stroke":"#555"},"className":"stroke-foreground  stroke-connection","animated":false,"id":"reactflow__edge-ChatOpenAI-GGXOo{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-GGXOoœ}-JsonAgent-C1MWT{œfieldNameœ:œllmœ,œidœ:œJsonAgent-C1MWTœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"},{"source":"JsonAgent-C1MWT","sourceHandle":"{œbaseClassesœ:[œChainœ,œAgentExecutorœ],œdataTypeœ:œJsonAgentœ,œidœ:œJsonAgent-C1MWTœ}","target":"OpenAPIToolkit-nRDBz","targetHandle":"{œfieldNameœ:œjson_agentœ,œidœ:œOpenAPIToolkit-nRDBzœ,œinputTypesœ:null,œtypeœ:œAgentExecutorœ}","data":{"targetHandle":{"fieldName":"json_agent","id":"OpenAPIToolkit-nRDBz","inputTypes":null,"type":"AgentExecutor"},"sourceHandle":{"baseClasses":["Chain","AgentExecutor"],"dataType":"JsonAgent","id":"JsonAgent-C1MWT"}},"style":{"stroke":"#555"},"className":"stroke-foreground  stroke-connection","animated":false,"id":"reactflow__edge-JsonAgent-C1MWT{œbaseClassesœ:[œChainœ,œAgentExecutorœ],œdataTypeœ:œJsonAgentœ,œidœ:œJsonAgent-C1MWTœ}-OpenAPIToolkit-nRDBz{œfieldNameœ:œjson_agentœ,œidœ:œOpenAPIToolkit-nRDBzœ,œinputTypesœ:null,œtypeœ:œAgentExecutorœ}"},{"source":"JsonToolkit-tsXDB","sourceHandle":"{œbaseClassesœ:[œJsonToolkitœ,œBaseToolkitœ],œdataTypeœ:œJsonToolkitœ,œidœ:œJsonToolkit-tsXDBœ}","target":"JsonAgent-C1MWT","targetHandle":"{œfieldNameœ:œtoolkitœ,œidœ:œJsonAgent-C1MWTœ,œinputTypesœ:null,œtypeœ:œJsonToolkitœ}","data":{"targetHandle":{"fieldName":"toolkit","id":"JsonAgent-C1MWT","inputTypes":null,"type":"JsonToolkit"},"sourceHandle":{"baseClasses":["JsonToolkit","BaseToolkit"],"dataType":"JsonToolkit","id":"JsonToolkit-tsXDB"}},"style":{"stroke":"#555"},"className":"stroke-foreground  stroke-connection","animated":false,"id":"reactflow__edge-JsonToolkit-tsXDB{œbaseClassesœ:[œJsonToolkitœ,œBaseToolkitœ],œdataTypeœ:œJsonToolkitœ,œidœ:œJsonToolkit-tsXDBœ}-JsonAgent-C1MWT{œfieldNameœ:œtoolkitœ,œidœ:œJsonAgent-C1MWTœ,œinputTypesœ:null,œtypeœ:œJsonToolkitœ}"},{"source":"JsonSpec-ARfxj","sourceHandle":"{œbaseClassesœ:[œToolœ,œBaseToolœ,œJsonSpecœ],œdataTypeœ:œJsonSpecœ,œidœ:œJsonSpec-ARfxjœ}","target":"JsonToolkit-tsXDB","targetHandle":"{œfieldNameœ:œspecœ,œidœ:œJsonToolkit-tsXDBœ,œinputTypesœ:null,œtypeœ:œJsonSpecœ}","data":{"targetHandle":{"fieldName":"spec","id":"JsonToolkit-tsXDB","inputTypes":null,"type":"JsonSpec"},"sourceHandle":{"baseClasses":["Tool","BaseTool","JsonSpec"],"dataType":"JsonSpec","id":"JsonSpec-ARfxj"}},"style":{"stroke":"#555"},"className":"stroke-foreground  stroke-connection","animated":false,"id":"reactflow__edge-JsonSpec-ARfxj{œbaseClassesœ:[œToolœ,œBaseToolœ,œJsonSpecœ],œdataTypeœ:œJsonSpecœ,œidœ:œJsonSpec-ARfxjœ}-JsonToolkit-tsXDB{œfieldNameœ:œspecœ,œidœ:œJsonToolkit-tsXDBœ,œinputTypesœ:null,œtypeœ:œJsonSpecœ}"},{"source":"TextRequestsWrapper-tGUS6","sourceHandle":"{œbaseClassesœ:[œGenericRequestsWrapperœ,œTextRequestsWrapperœ],œdataTypeœ:œTextRequestsWrapperœ,œidœ:œTextRequestsWrapper-tGUS6œ}","target":"OpenAPIToolkit-nRDBz","targetHandle":"{œfieldNameœ:œrequests_wrapperœ,œidœ:œOpenAPIToolkit-nRDBzœ,œinputTypesœ:null,œtypeœ:œTextRequestsWrapperœ}","data":{"targetHandle":{"fieldName":"requests_wrapper","id":"OpenAPIToolkit-nRDBz","inputTypes":null,"type":"TextRequestsWrapper"},"sourceHandle":{"baseClasses":["GenericRequestsWrapper","TextRequestsWrapper"],"dataType":"TextRequestsWrapper","id":"TextRequestsWrapper-tGUS6"}},"style":{"stroke":"#555"},"className":"stroke-foreground  stroke-connection","animated":false,"id":"reactflow__edge-TextRequestsWrapper-tGUS6{œbaseClassesœ:[œGenericRequestsWrapperœ,œTextRequestsWrapperœ],œdataTypeœ:œTextRequestsWrapperœ,œidœ:œTextRequestsWrapper-tGUS6œ}-OpenAPIToolkit-nRDBz{œfieldNameœ:œrequests_wrapperœ,œidœ:œOpenAPIToolkit-nRDBzœ,œinputTypesœ:null,œtypeœ:œTextRequestsWrapperœ}"},{"source":"OpenAI-Yb1wj","sourceHandle":"{œbaseClassesœ:[œBaseLLMœ,œOpenAIœ,œBaseOpenAIœ,œBaseLanguageModelœ],œdataTypeœ:œOpenAIœ,œidœ:œOpenAI-Yb1wjœ}","target":"CombineDocsChain-UzJAV","targetHandle":"{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-UzJAVœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}","data":{"targetHandle":{"fieldName":"llm","id":"CombineDocsChain-UzJAV","inputTypes":null,"type":"BaseLanguageModel"},"sourceHandle":{"baseClasses":["BaseLLM","OpenAI","BaseOpenAI","BaseLanguageModel"],"dataType":"OpenAI","id":"OpenAI-Yb1wj"}},"style":{"stroke":"#555"},"className":"stroke-foreground  stroke-connection","animated":false,"id":"reactflow__edge-OpenAI-Yb1wj{œbaseClassesœ:[œBaseLLMœ,œOpenAIœ,œBaseOpenAIœ,œBaseLanguageModelœ],œdataTypeœ:œOpenAIœ,œidœ:œOpenAI-Yb1wjœ}-CombineDocsChain-UzJAV{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-UzJAVœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"}],"viewport":{"x":479.08020747696366,"y":766.6137029430845,"zoom":0.6597539662894835}},"description":"Powerful Prompts, Perfectly Positioned.","name":"test_flow","last_tested_version":"0.6.18","is_component":false}